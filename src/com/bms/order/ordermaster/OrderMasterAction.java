package com.bms.order.ordermaster;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bms.audit.AuditDBHelper;
import com.bms.constants.Constants;
import com.bms.mail.MailSMS;
import com.bms.neetai.userroles.UserRoleDBHelper;
import com.bms.neetai.users.UserActionForm;
import com.bms.neetai.users.UserDBHelper;
import com.bms.order.orderdetail.OrderDetailActionForm;
import com.bms.order.orderdetail.OrderDetailDBHelper;
import com.bms.retail.RetailActionForm;
import com.bms.retail.RetailDBAdapter;
import com.bms.retail.RetailDBHelper;
import com.bms.struts.SCMAction;
/*import com.scm.po.purchaseorderdetail.StockTakeDetDBHelper;
import com.scm.po.purchaseorderdetail.StockTakeDetailActionForm;
import com.scm.po.purchaseordermaster.StockTakeMasterActionForm;
import com.scm.po.purchaseordermaster.StockTakeMasterDBHelper;*/
/*import java.util.jar.Pack200.*;*/

/**
 * @Servlet implementation class OrderMasterAction
 */

public class OrderMasterAction extends SCMAction {

	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
				
		HttpSession httpSession=request.getSession(true);
		UserActionForm userActionForm=(UserActionForm)httpSession.getAttribute(Constants.USER_BEAN);
		int compid=(int)httpSession.getAttribute(Constants.COMPANY_ID);
		//ServerAppContext serverAppContext  = (ServerAppContext)request.getServletContext().getAttribute(Constants.STRUTS_APPLICATION_CONTEXT);
	
		OrderMasterActionForm orderMasterActionForm=(OrderMasterActionForm)form;
		OrderMasterDBHelper orderMasterDBHelper=new OrderMasterDBHelper();
		OrderDetailDBHelper orderDetailDBHelper=new OrderDetailDBHelper();
		UserRoleDBHelper userRoleDBHelper = new UserRoleDBHelper();
		UserDBHelper userDBHelper = new UserDBHelper();
		
		SimpleDateFormat simpleDateFormat=new SimpleDateFormat(Constants.DATE_FORMAT);
		System.out.println("order no selected"+orderMasterActionForm.getOrderMasterId());
		
		String itemMasterId[]=request.getParameterValues("itemMasterId");
		String description[]=request.getParameterValues("description");
		String quantity[]=request.getParameterValues("quantity");
		String rate[]=request.getParameterValues("rate");
		String amount[]=request.getParameterValues("amount");
		
		String [] orderDetailIdArray = request.getParameterValues("orderDetailId");
		float orderQuantity=0f;
		for(int i=0;i<quantity.length;i++)
		{
			orderQuantity+=Float.parseFloat(quantity[i]);
		}
		System.out.println("orderQuantity "+orderQuantity);
		
		// Code for maintain retailers record
		RetailDBHelper retailDBHelper = new RetailDBHelper();
		int userid = orderMasterActionForm.getUserMasterId();
		int roleid = userDBHelper.getSingleUserByUserId(userid).getUserRolesMasterId();
		String rolename = userRoleDBHelper.getUserRoleByRoleId(roleid).getName();		
		if(rolename.equalsIgnoreCase(Constants.ROLE_NAME_FOR_RETAILER)){
			for(int i = 0 ; i < itemMasterId.length ; i++){
				// maintain the records of items that has been ordered again.
				int result = retailDBHelper.checkAvailableItemForRetailer(userid, Integer.parseInt(itemMasterId[i]));
				if(result > 0){
				retailDBHelper.updateOrderQuantityForRetailerItem(userid, Integer.parseInt(itemMasterId[i]), Float.parseFloat(quantity[i]));	
				}else{
					RetailActionForm retailBean = new RetailActionForm();
					retailBean.setRetailid(userid);
					retailBean.setItemid(Integer.parseInt(itemMasterId[i]));
					retailBean.setCompanymasterid(compid);
					retailBean.setOrderquantity(Float.parseFloat(quantity[i]));
					retailDBHelper.insertRetailDetails(retailBean);
				}								
			}
		}
		
		
		
		
		
		if(orderMasterActionForm.getOrderMasterId()==0){
		
			orderMasterActionForm.setCreatedBy(userActionForm.getUserMasterId());
			orderMasterActionForm.setCreatedDTTM(simpleDateFormat.format(new Date()));
			orderMasterActionForm.setState(1);
			orderMasterActionForm.setCompanyMasterId(compid);
			orderMasterActionForm.setIsActive(1);
			orderMasterActionForm.setOrderQuantity(orderQuantity);
			
			//if order not generated by admin then take customer id from session because in jsp customer dropdown readonly and bean cant able to read readonly value.
			if(orderMasterActionForm.getUserMasterId()==0){
				orderMasterActionForm.setUserMasterId(userActionForm.getUserMasterId());
			}
			
			System.out.println("userid "+orderMasterActionForm.getUserMasterId());
			int orderMasterId=orderMasterDBHelper.addOrderMaster(orderMasterActionForm);
			//String disable[]=request.getParameterValues("isDisableArr");
			
			OrderDetailActionForm orderDetailActionForm;
			
			for(int i=0;i<itemMasterId.length;i++)
			{
				orderDetailActionForm=new OrderDetailActionForm();
				orderDetailActionForm.setItemMasterId(Integer.parseInt(itemMasterId[i]));
				orderDetailActionForm.setDescription(description[i]);
				orderDetailActionForm.setQuantity(Float.parseFloat(quantity[i]));
				orderDetailActionForm.setRate(Float.parseFloat(rate[i]));
				orderDetailActionForm.setAmount(Float.parseFloat(amount[i]));
				orderDetailActionForm.setOrderMasterId(orderMasterId);
				orderMasterActionForm.setIsActive(1);
				orderDetailDBHelper.addorderDetailDBAdapter(orderDetailActionForm);					
			}
			
			//code for sending mail when order is placed.
			OrderMasterActionForm orderDataFromWhichWeTakeOrderMasterIdToTrakeOrder=new OrderMasterActionForm();
			ArrayList<OrderMasterActionForm> allOrderList=new ArrayList<OrderMasterActionForm>();			
			allOrderList=orderMasterDBHelper.fetchAll();
			int orderMasterIdForMail=allOrderList.get(allOrderList.size()-1).getOrderMasterId();
			System.out.println(orderMasterIdForMail);
			System.out.println("hello");
			orderDataFromWhichWeTakeOrderMasterIdToTrakeOrder=orderMasterDBHelper.getOrderByMasterId(orderMasterIdForMail);
			System.out.println(orderDataFromWhichWeTakeOrderMasterIdToTrakeOrder);
			
			//ArrayList<OrderDetailActionForm> orderDetailListForItemData=orderDetailDBHelper.getOrderDetailsListByOrderMasterId(orderDataFromWhichWeTakeOrderMasterIdToTrakeOrder.getOrderMasterId());
			try
			{
			MailSMS mailSender=new MailSMS();
			mailSender.sendMail(orderMasterIdForMail);
			System.out.println("hello");
			}
			catch(Exception e)
			{
				System.out.println(e);
			}
			
			
		}//update order details list
		else{
			
			int orderMasterId=orderMasterActionForm.getOrderMasterId();
			ArrayList<OrderDetailActionForm> orderDetailActionFormsList=orderDetailDBHelper.fetchAllorderDetailByOrderMasterId(orderMasterId);
			OrderDetailActionForm orderDetailActionForm=new OrderDetailActionForm();
			orderMasterActionForm.setModifiedBy(userActionForm.getUserMasterId());
			orderMasterActionForm.setModifiedDTTM(simpleDateFormat.format(new Date()));
			orderMasterActionForm.setIsActive(1);
			orderMasterActionForm.setCompanyMasterId(compid);
			orderMasterActionForm.setUserMasterId(orderMasterActionForm.getCustomerMasterId());
			
			orderMasterDBHelper.updateOrder(orderMasterActionForm);
			if(orderDetailActionFormsList.size()<itemMasterId.length)
			{
			
				for(int i=0;i<orderDetailActionFormsList.size();i++)
				{
					int j=Integer.parseInt(orderDetailIdArray[i]);
					orderDetailActionForm.setOrderDetailId(j);
					orderDetailActionForm.setItemMasterId(Integer.parseInt(itemMasterId[i]));
					orderDetailActionForm.setDescription(description[i]);
					orderDetailActionForm.setQuantity(Float.parseFloat(quantity[i]));
					orderDetailActionForm.setRate(Float.parseFloat(rate[i]));
					orderDetailActionForm.setAmount(Float.parseFloat(amount[i]));
					orderDetailActionForm.setOrderMasterId(orderMasterId);
					
					orderDetailDBHelper.updateorderDetailDBAdapter(orderDetailActionForm);
					AuditDBHelper auditDBHelper=new AuditDBHelper();
					auditDBHelper.addAudit("", "", "", "", "", "", "","");
				}
				
				for(int i=orderDetailActionFormsList.size();i<itemMasterId.length;i++)
				{
					orderDetailActionForm.setOrderDetailId(0);
					orderDetailActionForm.setItemMasterId(Integer.parseInt(itemMasterId[i]));
					orderDetailActionForm.setDescription(description[i]);
					orderDetailActionForm.setQuantity(Float.parseFloat(quantity[i]));
					orderDetailActionForm.setRate(Float.parseFloat(rate[i]));
					orderDetailActionForm.setAmount(Float.parseFloat(amount[i]));
					orderDetailActionForm.setOrderMasterId(orderMasterId);
						
					orderDetailDBHelper.addorderDetailDBAdapter(orderDetailActionForm);
					AuditDBHelper auditDBHelper=new AuditDBHelper();
					auditDBHelper.addAudit("", "", "", "", "", "", "","");
				}
					
				
			}else
			{
				//int i=0;
				Iterator<OrderDetailActionForm> iteratortemp=orderDetailActionFormsList.iterator();
				//int [] itemEntryArray=new int[100];
				
				while(iteratortemp.hasNext())
				{	
					OrderDetailActionForm orderDetailActionForm2=iteratortemp.next();
					{
						orderDetailDBHelper.deleteorderDetailDBAdapterById(orderDetailActionForm2.getOrderDetailId());
					}
					//i++;
				}
				
				for(int i=0;i<itemMasterId.length;i++)
				{
					orderDetailActionForm.setItemMasterId(Integer.parseInt(itemMasterId[i]));
					orderDetailActionForm.setQuantity(Float.parseFloat(quantity[i]));
					orderDetailActionForm.setDescription(description[i]);
					orderDetailActionForm.setRate(Float.parseFloat(rate[i]));
					orderDetailActionForm.setAmount(Float.parseFloat(amount[i]));
					orderDetailActionForm.setOrderMasterId(orderMasterId);
					
					orderDetailDBHelper.addorderDetailDBAdapter(orderDetailActionForm);
					AuditDBHelper auditDBHelper=new AuditDBHelper();
					auditDBHelper.addAudit("", "", "", "", "", "", "","");
				}
				
			}
			
		}
		
	return mapping.findForward(Constants.STRUTS_MAPPING_SUCCESS);
	}
}
